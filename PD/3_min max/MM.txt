#include <iostream>
#include <vector>
#include <omp.h>

using namespace std;

// Function to find minimum element in a vector
int parallelMin(const vector<int>& vec) {
    int min_val = vec[0];
    #pragma omp parallel for reduction(min:min_val)
    for (size_t i = 1; i < vec.size(); ++i) {
        if (vec[i] < min_val) {
            min_val = vec[i];
        }
    }
    return min_val;
}

// Function to find maximum element in a vector
int parallelMax(const vector<int>& vec) {
    int max_val = vec[0];
    #pragma omp parallel for reduction(max:max_val)
    for (size_t i = 1; i < vec.size(); ++i) {
        if (vec[i] > max_val) {
            max_val = vec[i];
        }
    }
    return max_val;
}

// Function to calculate sum of elements in a vector
int parallelSum(const vector<int>& vec) {
    int sum = 0;
    #pragma omp parallel for reduction(+:sum)
    for (size_t i = 0; i < vec.size(); ++i) {
        sum += vec[i];
    }
    return sum;
}

// Function to calculate average of elements in a vector
double parallelAverage(const vector<int>& vec) {
    int sum = parallelSum(vec);
    return static_cast<double>(sum) / vec.size();
}

int main() {
    int size;
    cout << "Enter the number of elements: ";
    cin >> size;

    vector<int> numbers(size);

    cout << "Enter the elements:" << endl;
    for (int i = 0; i < size; ++i) {
        cout << "Element " << i + 1 << ": ";
        cin >> numbers[i];
    }

    // Find minimum
    int min_val = parallelMin(numbers);
    cout << "Minimum value: " << min_val << endl;

    // Find maximum
    int max_val = parallelMax(numbers);
    cout << "Maximum value: " << max_val << endl;

    // Calculate sum
    int sum = parallelSum(numbers);
    cout << "Sum of values: " << sum << endl;

    // Calculate average
    double average = parallelAverage(numbers);
    cout << "Average value: " << average << endl;

    return 0;
}
